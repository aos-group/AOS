     1  = 00280000                              	BOTPAK	equ		0x00280000		; bootpack 加载目标
     2  = 00100000                              	DSKCAC	equ		0x00100000		; 磁盘缓冲位置
     3  = 00008000                              	DSKCAC0	equ		0x00008000		; 磁盘缓冲位置 (实模式)
     4 00000000                                 
     5 00000000                                 ; 有关 BOOT_INFO
     6  = 00000FF0                              	CYLS	equ		0x0ff0			; ipl 读取结束时的扇区号的存储地址
     7  = 00000FF1                              	LEDS	equ		0x0ff1
     8  = 00000FF2                              	VMODE	equ		0x0ff2			; 关于颜色数目的信息、颜色的位数
     9  = 00000FF4                              	SCRNX	equ 	0x0ff4			; 分辨率的 X (xcreen x)
    10  = 00000FF6                              	SCRNY	equ		0x0ff6			; 分辨率的 Y (xcreen y)
    11  = 00000FF8                              	VRAM	equ		0x0ff8			; 图像缓冲区的开始地址
    12 00000000                                 
    13                                          	org 0xc200			; 0x8000 + 0x4200
    14 0000C200                                 
    15 0000C200                                 ; 设置屏幕模式
    16 0000C200 B0 13                           	mov al, 0x13		; VGA 显卡，320*200*8 位彩色
    17 0000C202 B4 00                           	mov ah, 0x00
    18 0000C204 CD 10                           	int 0x10
    19 0000C206 C6 06 0FF2 08                   	mov byte [VMODE], 8		; 记录画面模式
    20 0000C20B C7 06 0FF4 0140                 	mov word [SCRNX], 320
    21 0000C211 C7 06 0FF6 00C8                 	mov word [SCRNY], 200
    22 0000C217 66 C7 06 0FF8 000A0000          	mov dword [VRAM], 0x000a0000
    23 0000C220                                 
    24 0000C220                                 ; 用 BIOS 取得键盘上各种 LED 指示灯的状态
    25 0000C220 B4 02                           	mov ah, 0x02
    26 0000C222 CD 16                           	int 0x16
    27 0000C224 A2 0FF1                         	mov [LEDS], al
    28 0000C227                                 
    29 0000C227                                 ; PIC 关闭一切中断
    30 0000C227                                 ; 	根据 AT 兼容机的规格，如果要初始化 PIC,
    31 0000C227                                 ;	必须在 cli 之前进行，否则有时会挂起
    32 0000C227                                 ; 	随后进行 PIC 的初始化
    33 0000C227 B0 FF                           	mov al, 0xff
    34 0000C229 E6 21                           	out 0x21, al			; 禁止主 PIC 的全部中断
    35 0000C22B 90                              	nop						; 如果连续执行 out 指令，有些机种会无法正常运行
    36 0000C22C E6 A1                           	out 0xa1, al			; 禁止从 PIC 的全部中断
    37 0000C22E                                 
    38 0000C22E FA                              	cli						; 禁止 CPU 级别的中断
    39 0000C22F                                 
    40 0000C22F                                 ; 为了让 CPU 能够访问 1MB 以上的内存空间，设定 A20 GATE
    41 0000C22F E8 00B5                         	call waitkbdout
    42 0000C232 B0 D1                           	mov al, 0xd1
    43 0000C234 E6 64                           	out 0x64, al
    44 0000C236 E8 00AE                         	call waitkbdout
    45 0000C239 B0 DF                           	mov al, 0xdf			; enable A20
    46 0000C23B E6 60                           	out 0x60, al
    47 0000C23D E8 00A7                         	call waitkbdout
    48 0000C240                                 
    49 0000C240                                 ; 切换到保护模式
    50 0000C240                                 [instrset "i486p"]			; 使用 486 指令
    51 0000C240 0F 01 16 C32A                   	lgdt [GDTR0]			; 设定临时 GDT
    52 0000C245 0F 20 C0                        	mov eax, cr0
    53 0000C248 66 25 7FFFFFFF                  	and eax, 0x7fffffff		; 禁止分页
    54 0000C24E 66 83 C8 01                     	or eax, 0x00000001		; 切换到保护模式
    55 0000C252 0F 22 C0                        	mov cr0, eax
    56 0000C255 EB 00                           	jmp pipelineflush
    57 0000C257                                 
    58 0000C257                                 pipelineflush:
    59 0000C257 B8 0008                         	mov ax, 1 * 8
    60 0000C25A 8E D8                           	mov ds, ax
    61 0000C25C 8E C0                           	mov es, ax
    62 0000C25E 8E E0                           	mov fs, ax
    63 0000C260 8E E8                           	mov gs, ax
    64 0000C262 8E D0                           	mov ss, ax
    65 0000C264                                 
    66 0000C264                                 ; bootpack 的转送
    67 0000C264                                 ; 从 bootpack 的地址开始的 512KB 内容复制到 0x00280000 号地址去
    68 0000C264 66 BE 0000C330                  	mov esi, bootpack
    69 0000C26A 66 BF 00280000                  	mov edi, BOTPAK
    70 0000C270 66 B9 00020000                  	mov ecx, 512 * 1024 / 4
    71 0000C276 E8 0077                         	call memcpy
    72 0000C279                                 
    73 0000C279                                 ; 将启动扇区复制到 1MB 以后的内存
    74 0000C279                                 ; 占用内存空间: 0x00100000 ~ 0x001001ff
    75 0000C279 66 BE 0007C000                  	mov esi, 0x7c000
    76 0000C27F 66 BF 00100000                  	mov edi, DSKCAC
    77 0000C285 66 B9 00000080                  	mov ecx, 512 / 4
    78 0000C28B E8 0062                         	call memcpy
    79 0000C28E                                 
    80 0000C28E                                 ; 所有剩下的
    81 0000C28E                                 ; 占用内存空间: 0x00100200 ~ 0x001047ff
    82 0000C28E 66 BE 00008200                  	mov esi, DSKCAC0 + 512
    83 0000C294 66 BF 00100200                  	mov edi, DSKCAC + 512
    84 0000C29A 66 B9 00000000                  	mov ecx, 0
    85 0000C2A0 8A 0E 0FF0                      	mov cl, byte [CYLS]
    86 0000C2A4 66 69 C9 00001200               	imul ecx, 512 * 18 * 2 / 4
    87 0000C2AB 66 81 E9 00000080               	sub ecx, 512 / 4
    88 0000C2B2 E8 003B                         	call memcpy
    89 0000C2B5                                 
    90 0000C2B5                                 ; 必须由 asmhead 来完成的工作，至此全部完毕
    91 0000C2B5                                 ; 	以后就交由 bootpack 来完成
    92 0000C2B5                                 
    93 0000C2B5                                 ; bootpack 的启动
    94 0000C2B5 66 BB 00280000                  	mov ebx, BOTPAK
    95 0000C2BB 67 66 8B 4B 10                  	mov ecx, [ebx + 16]		; 0x11a8
    96 0000C2C0 66 83 C1 03                     	add ecx, 3
    97 0000C2C4 66 C1 E9 02                     	shr ecx, 2				; ecx 对 4 向上取整
    98 0000C2C8 74 10                           	jz skip
    99 0000C2CA 67 66 8B 73 14                  	mov esi, [ebx + 20]		; 0x10c8
   100 0000C2CF 66 01 DE                        	add esi, ebx
   101 0000C2D2 67 66 8B 7B 0C                  	mov edi, [ebx + 12]		; 0x00310000
   102 0000C2D7 E8 0016                         	call memcpy				; 将 bootpack.hrb 第 0x10c8 字节开始的 0x11a8 字节复制到 0x00310000 号地址
   103 0000C2DA                                 skip:
   104 0000C2DA 67 66 8B 63 0C                  	mov esp, [ebx + 12]
   105 0000C2DF 66 EA 0000001B 0010             	jmp dword 2 * 8: 0x0000001b
   106 0000C2E7                                 
   107 0000C2E7                                 waitkbdout:
   108 0000C2E7 E4 64                           	in al, 0x64
   109 0000C2E9 24 02                           	and al, 0x02
   110 0000C2EB E4 60                           	in al, 0x60 			; 空读 (为了清空数据接收缓冲区中的垃圾数据)
   111 0000C2ED 75 F8                           	jnz waitkbdout
   112 0000C2EF C3                              	ret
   113 0000C2F0                                 
   114 0000C2F0                                 memcpy:
   115 0000C2F0 67 66 8B 06                     	mov eax, [esi]
   116 0000C2F4 66 83 C6 04                     	add esi, 4
   117 0000C2F8 67 66 89 07                     	mov [edi], eax
   118 0000C2FC 66 83 C7 04                     	add edi, 4
   119 0000C300 66 49                           	dec ecx
   120 0000C302 75 EC                           	jnz memcpy
   121 0000C304 C3                              	ret
   122 0000C305                                 
   123 0000C305 00 00 00 00 00 00 00 00 00 00   	alignb 16
       0000C30F 00 
   124 0000C310                                 GDT0:
   125 0000C310 00 00 00 00 00 00 00 00         	resb	8				; NULL selector
   126 0000C318 FFFF 0000 9200 00CF             	dw 		0xffff, 0x0000, 0x9200, 0x00cf	; 可以读写的段 (segment) 32bit
   127 0000C320 FFFF 0000 9A28 0047             	dw 		0xffff, 0x0000, 0x9a28, 0x0047 	; 可以执行的段 (segment) 32bit (bootpack 用)
   128 0000C328                                 
   129 0000C328 0000                            	dw 		0
   130 0000C32A                                 GDTR0:
   131 0000C32A 0017                            	dw 		8 * 3 - 1
   132 0000C32C 0000C310                        	dd 		GDT0
   133 0000C330                                 
   134 0000C330                                 	alignb 16
   135 0000C330                                 bootpack: