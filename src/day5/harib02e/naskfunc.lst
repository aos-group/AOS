     1 00000000                                 [format "WCOFF"]			; 制作目标文件的模式
     2 00000000                                 [instrset "i486p"]
     3 00000000                                 [bits 32]					; 制作 32 位模式用的机器语言
     4 00000000                                 
     5 00000000                                 ; 制作目标文件的信息
     6 00000000                                 [file "naskfunc.nas"]		; 源程序文件名
     7 00000000                                 
     8 00000000                                 	global _io_hlt, _io_cli, _io_sti, _io_stihlt
     9 00000000                                 	global _io_in8, _io_in16, _io_in32
    10 00000000                                 	global _io_out8, _io_out16, _io_out32
    11 00000000                                 	global _io_load_eflags, _io_store_eflags
    12 00000000                                 
    13 00000000                                 ; 以下是实际的函数
    14                                          [section .text]
    15 00000000                                 _io_hlt:					; void io_hlt(void);
    16 00000000 F4                              	hlt
    17 00000001 C3                              	ret
    18 00000002                                 
    19 00000002                                 _io_cli:					; void io_cli(void);
    20 00000002 FA                              	cli
    21 00000003 C3                              	ret
    22 00000004                                 
    23 00000004                                 _io_sti:					; void io_sti(void);
    24 00000004 FB                              	sti
    25 00000005 C3                              	ret
    26 00000006                                 
    27 00000006                                 _io_stihlt:					; void io_stihlt(void);
    28 00000006 FB                              	sti
    29 00000007 F4                              	hlt
    30 00000008 C3                              	ret
    31 00000009                                 
    32 00000009                                 _io_in8:					; int io_in8(int port);
    33 00000009 8B 54 24 04                     	mov edx, [esp + 4]
    34 0000000D B8 00000000                     	mov eax, 0
    35 00000012 EC                              	in al, dx
    36 00000013 C3                              	ret
    37 00000014                                 
    38 00000014                                 _io_in16:					; int io_in16(int port);
    39 00000014 8B 54 24 04                     	mov edx, [esp + 4]
    40 00000018 B8 00000000                     	mov eax, 0
    41 0000001D 66 ED                           	in ax, dx
    42 0000001F C3                              	ret
    43 00000020                                 
    44 00000020                                 _io_in32:					; int io_in32(int port);
    45 00000020 8B 54 24 04                     	mov edx, [esp + 4]
    46 00000024 ED                              	in eax, dx
    47 00000025 C3                              	ret
    48 00000026                                 
    49 00000026                                 _io_out8:					; void io_out8(int port, int data);
    50 00000026 8B 54 24 04                     	mov edx, [esp + 4]
    51 0000002A 8A 44 24 08                     	mov al, [esp + 8]
    52 0000002E EE                              	out dx, al
    53 0000002F C3                              	ret
    54 00000030                                 
    55 00000030                                 _io_out16:					; void io_out16(int port, int data);
    56 00000030 8B 54 24 04                     	mov edx, [esp + 4]
    57 00000034 66 8B 44 24 08                  	mov ax, [esp + 8]
    58 00000039 66 EF                           	out dx, ax
    59 0000003B C3                              	ret
    60 0000003C                                 
    61 0000003C                                 _io_out32:					; void io_out32(int port, int data);
    62 0000003C 8B 54 24 04                     	mov edx, [esp + 4]
    63 00000040 8B 44 24 08                     	mov eax, [esp + 8]
    64 00000044 EF                              	out dx, eax
    65 00000045 C3                              	ret
    66 00000046                                 
    67 00000046                                 _io_load_eflags:			; int io_load_eflags(void);
    68 00000046 9C                              	pushfd					; push flags double-word
    69 00000047 58                              	pop eax
    70 00000048 C3                              	ret
    71 00000049                                 
    72 00000049                                 _io_store_eflags:			; void io_store_eflags(int eflags);
    73 00000049 8B 44 24 04                     	mov eax, [esp + 4]
    74 0000004D 50                              	push eax
    75 0000004E 9D                              	popfd
    76 0000004F C3                              	ret