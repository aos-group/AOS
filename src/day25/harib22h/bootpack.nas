[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_init_gdtidt
	EXTERN	_init_pic
	EXTERN	_io_sti
	EXTERN	_fifo32_init
	EXTERN	_init_pit
	EXTERN	_init_keyboard
	EXTERN	_enable_mouse
	EXTERN	_io_out8
	EXTERN	_memtest
	EXTERN	_memman
	EXTERN	_memman_init
	EXTERN	_memman_free
	EXTERN	_init_palette
	EXTERN	_shtctl_init
	EXTERN	_task_init
	EXTERN	_task_run
	EXTERN	_sheet_alloc
	EXTERN	_memman_alloc_4k
	EXTERN	_sheet_setbuf
	EXTERN	_init_screen
	EXTERN	_make_window8
	EXTERN	_make_textbox8
	EXTERN	_task_alloc
	EXTERN	_console_task
	EXTERN	_timer_alloc
	EXTERN	_timer_init
	EXTERN	_timer_settime
	EXTERN	_init_mouse_cursor8
	EXTERN	_sheet_slide
	EXTERN	_sheet_updown
	EXTERN	_fifo32_put
	EXTERN	_fifo32_status
	EXTERN	_io_cli
	EXTERN	_fifo32_get
	EXTERN	_boxfill8
	EXTERN	_sheet_refresh
	EXTERN	_mouse_decode
	EXTERN	_cons_putstr0
	EXTERN	_asm_end_app
	EXTERN	_putfonts8_asc_sht
	EXTERN	_wait_KBC_sendready
	EXTERN	_task_sleep
	EXTERN	_change_wtitle8
[FILE "bootpack.c"]
	GLOBAL	_binfo
[SECTION .data]
	ALIGNB	4
_binfo:
	DD	4080
_keytable0.0:
	DB	0
	DB	0
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	48
	DB	45
	DB	94
	DB	0
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	64
	DB	91
	DB	0
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	59
	DB	58
	DB	0
	DB	0
	DB	93
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	44
	DB	46
	DB	47
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
_keytable1.1:
	DB	0
	DB	0
	DB	33
	DB	34
	DB	35
	DB	36
	DB	37
	DB	38
	DB	39
	DB	40
	DB	41
	DB	126
	DB	61
	DB	126
	DB	0
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	96
	DB	123
	DB	0
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	43
	DB	42
	DB	0
	DB	0
	DB	125
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	60
	DB	62
	DB	63
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	95
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	124
	DB	0
	DB	0
LC0:
	DB	"console",0x00
LC1:
	DB	"task_a",0x00
LC4:
	DB	0x0A,"Break(mouse):",0x0A,0x00
LC3:
	DB	0x0A,"Break(key):",0x0A,0x00
LC2:
	DB	" ",0x00
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	EDI,1
	PUSH	EBX
	LEA	EBX,DWORD [-44+EBP]
	SUB	ESP,1128
	MOV	EDX,DWORD [_binfo]
	MOV	DWORD [-1108+EBP],0
	MOVSX	EAX,WORD [4+EDX]
	SUB	EAX,16
	SAR	EAX,1
	MOV	DWORD [-1068+EBP],EAX
	MOVSX	EAX,WORD [6+EDX]
	SUB	EAX,44
	SAR	EAX,1
	MOV	DWORD [-1072+EBP],EAX
	MOV	AL,BYTE [1+EDX]
	SAR	AL,4
	MOV	EDX,EAX
	AND	EDX,7
	MOV	DWORD [-1112+EBP],EDX
	MOV	DWORD [-1116+EBP],-1
	MOV	DWORD [-1120+EBP],-1
	MOV	DWORD [-1124+EBP],-1
	MOV	DWORD [-1128+EBP],0
	CALL	_init_gdtidt
	CALL	_init_pic
	CALL	_io_sti
	LEA	EAX,DWORD [-636+EBP]
	PUSH	0
	PUSH	EAX
	PUSH	128
	PUSH	EBX
	CALL	_fifo32_init
	LEA	EAX,DWORD [-764+EBP]
	PUSH	0
	PUSH	EAX
	LEA	EAX,DWORD [-76+EBP]
	PUSH	32
	PUSH	EAX
	CALL	_fifo32_init
	ADD	ESP,32
	CALL	_init_pit
	PUSH	256
	PUSH	EBX
	CALL	_init_keyboard
	LEA	EAX,DWORD [-780+EBP]
	PUSH	EAX
	PUSH	512
	PUSH	EBX
	CALL	_enable_mouse
	PUSH	248
	PUSH	33
	CALL	_io_out8
	PUSH	239
	PUSH	161
	CALL	_io_out8
	ADD	ESP,36
	PUSH	-1073741825
	PUSH	4194304
	CALL	_memtest
	PUSH	DWORD [_memman]
	MOV	DWORD [-1084+EBP],EAX
	CALL	_memman_init
	PUSH	647168
	PUSH	4096
	PUSH	DWORD [_memman]
	CALL	_memman_free
	MOV	EAX,DWORD [-1084+EBP]
	SUB	EAX,4194304
	PUSH	EAX
	PUSH	4194304
	PUSH	DWORD [_memman]
	CALL	_memman_free
	ADD	ESP,36
	CALL	_init_palette
	MOV	EDX,DWORD [_binfo]
	MOVSX	EAX,WORD [6+EDX]
	PUSH	EAX
	MOVSX	EAX,WORD [4+EDX]
	PUSH	EAX
	PUSH	DWORD [8+EDX]
	PUSH	DWORD [_memman]
	CALL	_shtctl_init
	MOV	DWORD [4068],EAX
	PUSH	DWORD [_memman]
	MOV	DWORD [-1088+EBP],EAX
	CALL	_task_init
	PUSH	2
	PUSH	1
	MOV	DWORD [-1104+EBP],EAX
	PUSH	EAX
	MOV	DWORD [-20+EBP],EAX
	CALL	_task_run
	ADD	ESP,32
	PUSH	DWORD [-1088+EBP]
	CALL	_sheet_alloc
	MOV	EDX,DWORD [_binfo]
	MOV	DWORD [-1092+EBP],EAX
	MOVSX	EAX,WORD [4+EDX]
	MOVSX	EDX,WORD [6+EDX]
	IMUL	EAX,EDX
	PUSH	EAX
	PUSH	DWORD [_memman]
	CALL	_memman_alloc_4k
	MOV	EDX,DWORD [_binfo]
	PUSH	-1
	MOV	EBX,EAX
	MOVSX	EAX,WORD [6+EDX]
	PUSH	EAX
	MOVSX	EAX,WORD [4+EDX]
	PUSH	EAX
	PUSH	EBX
	PUSH	DWORD [-1092+EBP]
	CALL	_sheet_setbuf
	MOV	EDX,DWORD [_binfo]
	ADD	ESP,32
	MOVSX	EAX,WORD [6+EDX]
	PUSH	EAX
	MOVSX	EAX,WORD [4+EDX]
	PUSH	EAX
	PUSH	EBX
	CALL	_init_screen
	ADD	ESP,12
	MOV	DWORD [-1136+EBP],0
L6:
	PUSH	DWORD [-1088+EBP]
	LEA	EBX,DWORD [-1052+EBP]
	CALL	_sheet_alloc
	PUSH	42240
	MOV	ECX,DWORD [-1136+EBP]
	PUSH	DWORD [_memman]
	MOV	DWORD [-1044+EBP+ECX*1],EAX
	LEA	ESI,DWORD [-1060+EBP]
	CALL	_memman_alloc_4k
	MOV	EDX,DWORD [-1136+EBP]
	MOV	DWORD [EBX+EDX*1],EAX
	PUSH	-1
	PUSH	165
	PUSH	256
	PUSH	EAX
	PUSH	DWORD [-1044+EBP+EDX*1]
	CALL	_sheet_setbuf
	MOV	ECX,DWORD [-1136+EBP]
	ADD	ESP,32
	PUSH	0
	PUSH	LC0
	PUSH	165
	PUSH	256
	PUSH	DWORD [EBX+ECX*1]
	CALL	_make_window8
	MOV	EBX,DWORD [-1136+EBP]
	PUSH	0
	PUSH	128
	PUSH	240
	PUSH	28
	PUSH	8
	PUSH	DWORD [-1044+EBP+EBX*1]
	CALL	_make_textbox8
	ADD	ESP,44
	CALL	_task_alloc
	MOV	EBX,EAX
	MOV	EAX,DWORD [-1136+EBP]
	MOV	DWORD [ESI+EAX*1],EBX
	PUSH	65536
	PUSH	DWORD [_memman]
	CALL	_memman_alloc_4k
	MOV	EDX,DWORD [-1136+EBP]
	ADD	EAX,65524
	MOV	DWORD [100+EBX],EAX
	MOV	EBX,EDX
	MOV	EAX,DWORD [ESI+EDX*1]
	MOV	EDX,DWORD [-1044+EBP+EDX*1]
	MOV	ECX,DWORD [100+EAX]
	MOV	DWORD [76+EAX],_console_task
	MOV	DWORD [116+EAX],8
	MOV	DWORD [120+EAX],16
	MOV	DWORD [124+EAX],8
	MOV	DWORD [128+EAX],8
	MOV	DWORD [132+EAX],8
	MOV	DWORD [136+EAX],8
	MOV	DWORD [4+ECX],EDX
	MOV	ECX,DWORD [-1084+EBP]
	MOV	EDX,DWORD [100+EAX]
	MOV	DWORD [8+EDX],ECX
	PUSH	2
	PUSH	2
	PUSH	EAX
	CALL	_task_run
	ADD	ESP,20
	MOV	EAX,DWORD [-1044+EBP+EBX*1]
	MOV	EDX,DWORD [ESI+EBX*1]
	ADD	EBX,4
	OR	DWORD [28+EAX],32
	DEC	EDI
	MOV	DWORD [36+EAX],EDX
	MOV	DWORD [-1136+EBP],EBX
	JNS	L6
	PUSH	DWORD [-1088+EBP]
	CALL	_sheet_alloc
	PUSH	7488
	PUSH	DWORD [_memman]
	MOV	DWORD [-1100+EBP],EAX
	CALL	_memman_alloc_4k
	PUSH	-1
	MOV	EBX,EAX
	PUSH	52
	PUSH	144
	PUSH	EAX
	PUSH	DWORD [-1100+EBP]
	CALL	_sheet_setbuf
	ADD	ESP,32
	PUSH	1
	PUSH	LC1
	PUSH	52
	PUSH	144
	PUSH	EBX
	LEA	EBX,DWORD [-1036+EBP]
	CALL	_make_window8
	PUSH	7
	PUSH	16
	PUSH	128
	PUSH	28
	PUSH	8
	PUSH	DWORD [-1100+EBP]
	CALL	_make_textbox8
	ADD	ESP,44
	MOV	DWORD [-1076+EBP],8
	MOV	DWORD [-1080+EBP],7
	CALL	_timer_alloc
	PUSH	1
	MOV	DWORD [-1064+EBP],EAX
	LEA	EAX,DWORD [-44+EBP]
	PUSH	EAX
	PUSH	DWORD [-1064+EBP]
	CALL	_timer_init
	PUSH	50
	PUSH	DWORD [-1064+EBP]
	CALL	_timer_settime
	PUSH	DWORD [-1088+EBP]
	CALL	_sheet_alloc
	PUSH	99
	PUSH	16
	PUSH	16
	MOV	DWORD [-1096+EBP],EAX
	PUSH	EBX
	PUSH	EAX
	CALL	_sheet_setbuf
	ADD	ESP,44
	PUSH	99
	PUSH	EBX
	CALL	_init_mouse_cursor8
	PUSH	0
	PUSH	0
	PUSH	DWORD [-1092+EBP]
	CALL	_sheet_slide
	PUSH	6
	PUSH	56
	PUSH	DWORD [-1040+EBP]
	CALL	_sheet_slide
	ADD	ESP,32
	PUSH	2
	PUSH	8
	PUSH	DWORD [-1044+EBP]
	CALL	_sheet_slide
	PUSH	56
	PUSH	64
	PUSH	DWORD [-1100+EBP]
	CALL	_sheet_slide
	PUSH	DWORD [-1072+EBP]
	PUSH	DWORD [-1068+EBP]
	PUSH	DWORD [-1096+EBP]
	CALL	_sheet_slide
	ADD	ESP,36
	PUSH	0
	PUSH	DWORD [-1092+EBP]
	CALL	_sheet_updown
	PUSH	1
	PUSH	DWORD [-1040+EBP]
	CALL	_sheet_updown
	PUSH	2
	PUSH	DWORD [-1044+EBP]
	CALL	_sheet_updown
	PUSH	3
	PUSH	DWORD [-1100+EBP]
	CALL	_sheet_updown
	ADD	ESP,32
	PUSH	4
	PUSH	DWORD [-1096+EBP]
	CALL	_sheet_updown
	PUSH	237
	MOV	EBX,DWORD [-1100+EBP]
	MOV	DWORD [-1132+EBP],EBX
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	PUSH	DWORD [-1112+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,24
L91:
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	CALL	_fifo32_status
	POP	ECX
	TEST	EAX,EAX
	JLE	L10
	CMP	DWORD [-1116+EBP],0
	JS	L104
L10:
	LEA	EBX,DWORD [-44+EBP]
	CALL	_io_cli
	PUSH	EBX
	CALL	_fifo32_status
	POP	EDX
	TEST	EAX,EAX
	JE	L105
	PUSH	EBX
	CALL	_fifo32_get
	MOV	EDI,EAX
	CALL	_io_sti
	POP	EAX
	MOV	EAX,DWORD [-1132+EBP]
	CMP	DWORD [28+EAX],0
	JNE	L13
	MOV	EDX,DWORD [-1088+EBP]
	MOV	EAX,DWORD [16+EDX]
	MOV	EAX,DWORD [16+EDX+EAX*4]
	PUSH	DWORD [-1080+EBP]
	PUSH	DWORD [-1100+EBP]
	PUSH	EAX
	MOV	DWORD [-1132+EBP],EAX
	CALL	_keywin_on
	ADD	ESP,12
	MOV	DWORD [-1080+EBP],EAX
L13:
	LEA	EAX,DWORD [-256+EDI]
	CMP	EAX,255
	JBE	L106
	LEA	EAX,DWORD [-512+EDI]
	CMP	EAX,255
	JBE	L107
	CMP	EDI,1
	JG	L91
	TEST	EDI,EDI
	JE	L86
	PUSH	0
	PUSH	EBX
	PUSH	DWORD [-1064+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-1080+EBP],0
	JS	L88
	MOV	DWORD [-1080+EBP],0
L88:
	PUSH	50
	PUSH	DWORD [-1064+EBP]
	CALL	_timer_settime
	POP	EAX
	POP	EDX
	CMP	DWORD [-1080+EBP],0
	JS	L91
	MOV	EAX,DWORD [-1076+EBP]
	PUSH	43
	ADD	EAX,7
	MOV	EBX,DWORD [-1100+EBP]
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1076+EBP]
	MOVZX	EAX,BYTE [-1080+EBP]
	PUSH	EAX
	PUSH	DWORD [4+EBX]
	PUSH	DWORD [EBX]
	CALL	_boxfill8
	MOV	EAX,DWORD [-1076+EBP]
	PUSH	44
	ADD	EAX,8
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1076+EBP]
	PUSH	EBX
	CALL	_sheet_refresh
	ADD	ESP,48
	JMP	L91
L86:
	PUSH	1
	PUSH	EBX
	PUSH	DWORD [-1064+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-1080+EBP],0
	JS	L88
	MOV	DWORD [-1080+EBP],7
	JMP	L88
L107:
	MOV	EBX,EDI
	MOVZX	EAX,BL
	PUSH	EAX
	LEA	EAX,DWORD [-780+EBP]
	PUSH	EAX
	CALL	_mouse_decode
	POP	EDX
	POP	ECX
	TEST	EAX,EAX
	JE	L91
	MOV	EAX,DWORD [-772+EBP]
	MOV	EDX,DWORD [-776+EBP]
	ADD	DWORD [-1072+EBP],EAX
	ADD	DWORD [-1068+EBP],EDX
	JS	L108
L65:
	CMP	DWORD [-1072+EBP],0
	JS	L109
L66:
	MOV	EDX,DWORD [_binfo]
	MOVSX	EAX,WORD [4+EDX]
	DEC	EAX
	CMP	DWORD [-1068+EBP],EAX
	JLE	L67
	MOV	DWORD [-1068+EBP],EAX
L67:
	MOVSX	EAX,WORD [6+EDX]
	DEC	EAX
	CMP	DWORD [-1072+EBP],EAX
	JLE	L68
	MOV	DWORD [-1072+EBP],EAX
L68:
	PUSH	DWORD [-1072+EBP]
	PUSH	DWORD [-1068+EBP]
	PUSH	DWORD [-1096+EBP]
	CALL	_sheet_slide
	ADD	ESP,12
	TEST	DWORD [-768+EBP],1
	JNE	L110
	MOV	DWORD [-1120+EBP],-1
	JMP	L91
L110:
	CMP	DWORD [-1120+EBP],0
	JS	L111
	MOV	EBX,DWORD [-1072+EBP]
	MOV	EAX,DWORD [-1128+EBP]
	SUB	EBX,DWORD [-1124+EBP]
	MOV	ESI,DWORD [-1068+EBP]
	SUB	ESI,DWORD [-1120+EBP]
	ADD	EBX,DWORD [16+EAX]
	PUSH	EBX
	ADD	ESI,DWORD [12+EAX]
	PUSH	ESI
	PUSH	EAX
	CALL	_sheet_slide
	ADD	ESP,12
	MOV	EDX,DWORD [-1068+EBP]
	MOV	ECX,DWORD [-1072+EBP]
	MOV	DWORD [-1120+EBP],EDX
	MOV	DWORD [-1124+EBP],ECX
	JMP	L91
L111:
	MOV	ECX,DWORD [-1088+EBP]
	MOV	EDI,DWORD [16+ECX]
	LEA	ECX,DWORD [-1+EDI]
L102:
	TEST	ECX,ECX
	JLE	L91
	MOV	EBX,DWORD [-1088+EBP]
	MOV	ESI,DWORD [-1068+EBP]
	MOV	EBX,DWORD [20+EBX+ECX*4]
	MOV	DWORD [-1128+EBP],EBX
	MOV	EBX,DWORD [-1072+EBP]
	MOV	EAX,DWORD [-1128+EBP]
	SUB	EBX,DWORD [16+EAX]
	SUB	ESI,DWORD [12+EAX]
	JS	L73
	MOV	EAX,DWORD [4+EAX]
	CMP	ESI,EAX
	JGE	L73
	TEST	EBX,EBX
	JS	L73
	MOV	EDX,DWORD [-1128+EBP]
	CMP	EBX,DWORD [8+EDX]
	JGE	L73
	IMUL	EAX,EBX
	MOV	DWORD [-1140+EBP],EAX
	MOV	EDX,DWORD [EDX]
	MOV	EAX,DWORD [-1140+EBP]
	ADD	EAX,EBX
	MOVZX	EAX,BYTE [EAX+EDX*1]
	MOV	EDX,DWORD [-1128+EBP]
	CMP	EAX,DWORD [20+EDX]
	JNE	L112
L73:
	DEC	ECX
	JMP	L102
L112:
	LEA	EAX,DWORD [-1+EDI]
	PUSH	EAX
	PUSH	EDX
	CALL	_sheet_updown
	MOV	ECX,DWORD [-1132+EBP]
	POP	EDI
	CMP	DWORD [-1128+EBP],ECX
	POP	EAX
	JE	L77
	PUSH	DWORD [-1076+EBP]
	PUSH	DWORD [-1080+EBP]
	PUSH	DWORD [-1100+EBP]
	PUSH	ECX
	CALL	_keywin_off
	MOV	DWORD [-1080+EBP],EAX
	MOV	EAX,DWORD [-1128+EBP]
	PUSH	DWORD [-1080+EBP]
	PUSH	DWORD [-1100+EBP]
	PUSH	EAX
	MOV	DWORD [-1132+EBP],EAX
	CALL	_keywin_on
	ADD	ESP,28
	MOV	DWORD [-1080+EBP],EAX
L77:
	CMP	ESI,2
	JLE	L78
	MOV	EDX,DWORD [-1128+EBP]
	MOV	EAX,DWORD [4+EDX]
	SUB	EAX,3
	CMP	ESI,EAX
	JGE	L78
	CMP	EBX,2
	JLE	L78
	CMP	EBX,20
	JG	L78
	MOV	ECX,DWORD [-1068+EBP]
	MOV	EAX,DWORD [-1072+EBP]
	MOV	DWORD [-1120+EBP],ECX
	MOV	DWORD [-1124+EBP],EAX
L78:
	MOV	ECX,DWORD [-1128+EBP]
	MOV	EDX,DWORD [4+ECX]
	LEA	EAX,DWORD [-21+EDX]
	CMP	EAX,ESI
	JG	L91
	LEA	EAX,DWORD [-5+EDX]
	CMP	ESI,EAX
	JGE	L91
	CMP	EBX,4
	JLE	L91
	CMP	EBX,18
	JG	L91
	TEST	BYTE [28+ECX],16
	JE	L91
	MOV	EBX,DWORD [36+ECX]
	PUSH	LC4
	PUSH	DWORD [148+EBX]
	CALL	_cons_putstr0
	CALL	_io_cli
	LEA	EAX,DWORD [48+EBX]
	MOV	DWORD [84+EBX],EAX
	MOV	DWORD [76+EBX],_asm_end_app
	CALL	_io_sti
	POP	ECX
	POP	EBX
	JMP	L91
L109:
	MOV	DWORD [-1072+EBP],0
	JMP	L66
L108:
	MOV	DWORD [-1068+EBP],0
	JMP	L65
L106:
	CMP	EDI,383
	JG	L15
	CMP	DWORD [-1108+EBP],0
	JE	L16
	MOV	AL,BYTE [_keytable1.1-256+EDI]
L96:
	MOV	BYTE [-124+EBP],AL
L18:
	MOV	DL,BYTE [-124+EBP]
	LEA	EAX,DWORD [-65+EDX]
	CMP	AL,25
	JA	L19
	TEST	DWORD [-1112+EBP],4
	JNE	L95
	CMP	DWORD [-1108+EBP],0
	JE	L21
L19:
	MOV	AL,BYTE [-124+EBP]
	TEST	AL,AL
	JE	L23
	MOV	ECX,DWORD [-1100+EBP]
	CMP	DWORD [-1132+EBP],ECX
	JE	L113
	MOVSX	EAX,AL
	ADD	EAX,256
	PUSH	EAX
L103:
	MOV	EBX,DWORD [-1132+EBP]
	MOV	EAX,DWORD [36+EBX]
L101:
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
L97:
	POP	EBX
	POP	ESI
L27:
	CMP	DWORD [-1080+EBP],0
	JS	L61
	MOV	EAX,DWORD [-1076+EBP]
	PUSH	43
	ADD	EAX,7
	MOV	ECX,DWORD [-1100+EBP]
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1076+EBP]
	MOVZX	EAX,BYTE [-1080+EBP]
	PUSH	EAX
	PUSH	DWORD [4+ECX]
	PUSH	DWORD [ECX]
	CALL	_boxfill8
	ADD	ESP,28
L61:
	MOV	EAX,DWORD [-1076+EBP]
	PUSH	44
	ADD	EAX,8
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1076+EBP]
	PUSH	DWORD [-1100+EBP]
	CALL	_sheet_refresh
	ADD	ESP,20
	JMP	L91
L113:
	CMP	DWORD [-1076+EBP],127
	JG	L27
	PUSH	1
	LEA	EAX,DWORD [-124+EBP]
	PUSH	EAX
	PUSH	7
	PUSH	0
	PUSH	28
	PUSH	DWORD [-1076+EBP]
	PUSH	ECX
	MOV	BYTE [-123+EBP],0
	CALL	_putfonts8_asc_sht
	ADD	DWORD [-1076+EBP],8
L99:
	ADD	ESP,28
	JMP	L27
L23:
	CMP	EDI,270
	JE	L114
	CMP	EDI,271
	JE	L115
	CMP	EDI,298
	JE	L116
	CMP	EDI,310
	JE	L117
	CMP	EDI,426
	JE	L118
	CMP	EDI,438
	JE	L119
	CMP	EDI,314
	JE	L120
	CMP	EDI,325
	JE	L121
	CMP	EDI,326
	JE	L122
	CMP	EDI,506
	JE	L123
	CMP	EDI,510
	JE	L124
	CMP	EDI,284
	JE	L125
	CMP	EDI,315
	JE	L126
L57:
	CMP	EDI,343
	JNE	L27
	MOV	EDX,DWORD [-1088+EBP]
	MOV	EAX,DWORD [16+EDX]
	CMP	EAX,2
	JLE	L27
	DEC	EAX
	PUSH	EAX
	PUSH	DWORD [24+EDX]
	CALL	_sheet_updown
	JMP	L97
L126:
	CMP	DWORD [-1108+EBP],0
	JE	L57
	MOV	EAX,DWORD [-1132+EBP]
	MOV	EBX,DWORD [36+EAX]
	TEST	EBX,EBX
	JE	L27
	CMP	DWORD [52+EBX],0
	JE	L27
	PUSH	LC3
	PUSH	DWORD [148+EBX]
	CALL	_cons_putstr0
	CALL	_io_cli
	LEA	EAX,DWORD [48+EBX]
	MOV	DWORD [84+EBX],EAX
	MOV	DWORD [76+EBX],_asm_end_app
	CALL	_io_sti
	JMP	L97
L125:
	MOV	ECX,DWORD [-1100+EBP]
	CMP	DWORD [-1132+EBP],ECX
	JE	L27
	PUSH	266
	JMP	L103
L124:
	CALL	_wait_KBC_sendready
	PUSH	DWORD [-1116+EBP]
	PUSH	96
	CALL	_io_out8
	JMP	L97
L123:
	MOV	DWORD [-1116+EBP],-1
	JMP	L27
L122:
	XOR	DWORD [-1112+EBP],1
L98:
	PUSH	237
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	PUSH	DWORD [-1112+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L27
L121:
	XOR	DWORD [-1112+EBP],2
	JMP	L98
L120:
	XOR	DWORD [-1112+EBP],4
	JMP	L98
L119:
	AND	DWORD [-1108+EBP],-3
	JMP	L27
L118:
	AND	DWORD [-1108+EBP],-2
	JMP	L27
L117:
	OR	DWORD [-1108+EBP],2
	JMP	L27
L116:
	OR	DWORD [-1108+EBP],1
	JMP	L27
L115:
	PUSH	DWORD [-1076+EBP]
	PUSH	DWORD [-1080+EBP]
	PUSH	DWORD [-1100+EBP]
	PUSH	DWORD [-1132+EBP]
	CALL	_keywin_off
	MOV	EBX,DWORD [-1132+EBP]
	ADD	ESP,16
	MOV	ECX,DWORD [24+EBX]
	MOV	DWORD [-1080+EBP],EAX
	DEC	ECX
	JNE	L34
	MOV	EAX,DWORD [-1088+EBP]
	MOV	ECX,DWORD [16+EAX]
	DEC	ECX
L34:
	MOV	EDX,DWORD [-1088+EBP]
	MOV	ECX,DWORD [20+EDX+ECX*4]
	PUSH	DWORD [-1080+EBP]
	PUSH	DWORD [-1100+EBP]
	PUSH	ECX
	MOV	DWORD [-1132+EBP],ECX
	CALL	_keywin_on
	ADD	ESP,12
	MOV	DWORD [-1080+EBP],EAX
	JMP	L27
L114:
	MOV	EAX,DWORD [-1100+EBP]
	CMP	DWORD [-1132+EBP],EAX
	JE	L127
	MOV	EDX,DWORD [-1132+EBP]
	PUSH	264
	MOV	EAX,DWORD [36+EDX]
	JMP	L101
L127:
	CMP	DWORD [-1076+EBP],8
	JLE	L27
	PUSH	1
	PUSH	LC2
	PUSH	7
	PUSH	0
	PUSH	28
	PUSH	DWORD [-1076+EBP]
	PUSH	EAX
	CALL	_putfonts8_asc_sht
	SUB	DWORD [-1076+EBP],8
	JMP	L99
L21:
	LEA	EAX,DWORD [32+EDX]
	MOV	BYTE [-124+EBP],AL
	JMP	L19
L95:
	CMP	DWORD [-1108+EBP],0
	JE	L19
	JMP	L21
L16:
	MOV	AL,BYTE [_keytable0.0-256+EDI]
	JMP	L96
L15:
	MOV	BYTE [-124+EBP],0
	JMP	L18
L105:
	PUSH	DWORD [-1104+EBP]
	CALL	_task_sleep
	CALL	_io_sti
	POP	EAX
	JMP	L91
L104:
	PUSH	EBX
	CALL	_fifo32_get
	MOV	DWORD [-1116+EBP],EAX
	CALL	_wait_KBC_sendready
	PUSH	DWORD [-1116+EBP]
	PUSH	96
	CALL	_io_out8
	ADD	ESP,12
	JMP	L10
	GLOBAL	_keywin_off
_keywin_off:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EDI,DWORD [16+EBP]
	MOV	EBX,DWORD [8+EBP]
	PUSH	0
	PUSH	EBX
	MOV	ESI,DWORD [20+EBP]
	CALL	_change_wtitle8
	CMP	EBX,DWORD [12+EBP]
	POP	EAX
	POP	EDX
	JE	L132
	TEST	BYTE [28+EBX],32
	JNE	L133
L130:
	LEA	ESP,DWORD [-12+EBP]
	MOV	EAX,EDI
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L133:
	PUSH	3
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EBX
	POP	ESI
	JMP	L130
L132:
	PUSH	43
	LEA	EAX,DWORD [7+ESI]
	PUSH	EAX
	OR	EDI,-1
	PUSH	28
	PUSH	ESI
	PUSH	7
	PUSH	DWORD [4+EBX]
	PUSH	DWORD [EBX]
	CALL	_boxfill8
	ADD	ESP,28
	JMP	L130
	GLOBAL	_keywin_on
_keywin_on:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	PUSH	1
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	MOV	ESI,DWORD [16+EBP]
	CALL	_change_wtitle8
	CMP	EBX,DWORD [12+EBP]
	POP	EAX
	POP	EDX
	JE	L138
	TEST	BYTE [28+EBX],32
	JNE	L139
L136:
	LEA	ESP,DWORD [-8+EBP]
	MOV	EAX,ESI
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L139:
	PUSH	2
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	ECX
	POP	EBX
	JMP	L136
L138:
	XOR	ESI,ESI
	JMP	L136
