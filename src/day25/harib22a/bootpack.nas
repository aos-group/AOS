[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_init_gdtidt
	EXTERN	_init_pic
	EXTERN	_io_sti
	EXTERN	_fifo32_init
	EXTERN	_init_pit
	EXTERN	_init_keyboard
	EXTERN	_enable_mouse
	EXTERN	_io_out8
	EXTERN	_memtest
	EXTERN	_memman
	EXTERN	_memman_init
	EXTERN	_memman_free
	EXTERN	_init_palette
	EXTERN	_shtctl_init
	EXTERN	_task_init
	EXTERN	_task_run
	EXTERN	_sheet_alloc
	EXTERN	_memman_alloc_4k
	EXTERN	_sheet_setbuf
	EXTERN	_init_screen
	EXTERN	_make_window8
	EXTERN	_make_textbox8
	EXTERN	_task_alloc
	EXTERN	_console_task
	EXTERN	_timer_alloc
	EXTERN	_timer_init
	EXTERN	_timer_settime
	EXTERN	_init_mouse_cursor8
	EXTERN	_sheet_slide
	EXTERN	_sheet_updown
	EXTERN	_fifo32_put
	EXTERN	_fifo32_status
	EXTERN	_io_cli
	EXTERN	_fifo32_get
	EXTERN	_boxfill8
	EXTERN	_sheet_refresh
	EXTERN	_mouse_decode
	EXTERN	_console
	EXTERN	_cons_putstr0
	EXTERN	_asm_end_app
	EXTERN	_putfonts8_asc_sht
	EXTERN	_wait_KBC_sendready
	EXTERN	_task_sleep
	EXTERN	_change_wtitle8
[FILE "bootpack.c"]
	GLOBAL	_binfo
[SECTION .data]
	ALIGNB	4
_binfo:
	DD	4080
_keytable0.0:
	DB	0
	DB	0
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	48
	DB	45
	DB	94
	DB	0
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	64
	DB	91
	DB	0
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	59
	DB	58
	DB	0
	DB	0
	DB	93
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	44
	DB	46
	DB	47
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
_keytable1.1:
	DB	0
	DB	0
	DB	33
	DB	34
	DB	35
	DB	36
	DB	37
	DB	38
	DB	39
	DB	40
	DB	41
	DB	126
	DB	61
	DB	126
	DB	0
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	96
	DB	123
	DB	0
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	43
	DB	42
	DB	0
	DB	0
	DB	125
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	60
	DB	62
	DB	63
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	95
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	124
	DB	0
	DB	0
LC0:
	DB	"console",0x00
LC1:
	DB	"task_a",0x00
LC4:
	DB	0x0A,"Break(mouse):",0x0A,0x00
LC3:
	DB	0x0A,"Break(key):",0x0A,0x00
LC2:
	DB	" ",0x00
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,1104
	MOV	EDX,DWORD [_binfo]
	MOV	DWORD [-1084+EBP],0
	MOVSX	EAX,WORD [4+EDX]
	SUB	EAX,16
	SAR	EAX,1
	MOV	DWORD [-1044+EBP],EAX
	MOVSX	EAX,WORD [6+EDX]
	SUB	EAX,44
	SAR	EAX,1
	MOV	DWORD [-1048+EBP],EAX
	MOV	AL,BYTE [1+EDX]
	SAR	AL,4
	MOV	EDX,EAX
	AND	EDX,7
	MOV	DWORD [-1088+EBP],EDX
	MOV	DWORD [-1092+EBP],-1
	MOV	DWORD [-1096+EBP],-1
	MOV	DWORD [-1100+EBP],-1
	MOV	DWORD [-1104+EBP],0
	CALL	_init_gdtidt
	CALL	_init_pic
	CALL	_io_sti
	LEA	EAX,DWORD [-636+EBP]
	PUSH	0
	PUSH	EAX
	LEA	EAX,DWORD [-44+EBP]
	PUSH	128
	PUSH	EAX
	CALL	_fifo32_init
	LEA	EDX,DWORD [-76+EBP]
	PUSH	0
	LEA	EAX,DWORD [-764+EBP]
	PUSH	EAX
	PUSH	32
	PUSH	EDX
	CALL	_fifo32_init
	ADD	ESP,32
	CALL	_init_pit
	LEA	EAX,DWORD [-44+EBP]
	PUSH	256
	PUSH	EAX
	CALL	_init_keyboard
	LEA	EDX,DWORD [-44+EBP]
	LEA	EAX,DWORD [-780+EBP]
	PUSH	EAX
	PUSH	512
	PUSH	EDX
	CALL	_enable_mouse
	PUSH	248
	PUSH	33
	CALL	_io_out8
	PUSH	239
	PUSH	161
	CALL	_io_out8
	ADD	ESP,36
	PUSH	-1073741825
	PUSH	4194304
	CALL	_memtest
	PUSH	DWORD [_memman]
	MOV	DWORD [-1060+EBP],EAX
	CALL	_memman_init
	PUSH	647168
	PUSH	4096
	PUSH	DWORD [_memman]
	CALL	_memman_free
	MOV	EAX,DWORD [-1060+EBP]
	SUB	EAX,4194304
	PUSH	EAX
	PUSH	4194304
	PUSH	DWORD [_memman]
	CALL	_memman_free
	ADD	ESP,36
	CALL	_init_palette
	MOV	EDX,DWORD [_binfo]
	MOVSX	EAX,WORD [6+EDX]
	PUSH	EAX
	MOVSX	EAX,WORD [4+EDX]
	PUSH	EAX
	PUSH	DWORD [8+EDX]
	PUSH	DWORD [_memman]
	CALL	_shtctl_init
	MOV	DWORD [4068],EAX
	PUSH	DWORD [_memman]
	MOV	DWORD [-1064+EBP],EAX
	CALL	_task_init
	PUSH	2
	PUSH	1
	MOV	DWORD [-1076+EBP],EAX
	PUSH	EAX
	MOV	DWORD [-20+EBP],EAX
	CALL	_task_run
	ADD	ESP,32
	PUSH	DWORD [-1064+EBP]
	CALL	_sheet_alloc
	MOV	EDX,DWORD [_binfo]
	MOV	DWORD [-1068+EBP],EAX
	MOVSX	EAX,WORD [4+EDX]
	MOVSX	EDX,WORD [6+EDX]
	IMUL	EAX,EDX
	PUSH	EAX
	PUSH	DWORD [_memman]
	CALL	_memman_alloc_4k
	MOV	EDX,DWORD [_binfo]
	PUSH	-1
	MOV	EBX,EAX
	MOVSX	EAX,WORD [6+EDX]
	PUSH	EAX
	MOVSX	EAX,WORD [4+EDX]
	PUSH	EAX
	PUSH	EBX
	PUSH	DWORD [-1068+EBP]
	CALL	_sheet_setbuf
	MOV	EDX,DWORD [_binfo]
	ADD	ESP,32
	MOVSX	EAX,WORD [6+EDX]
	PUSH	EAX
	MOVSX	EAX,WORD [4+EDX]
	PUSH	EAX
	PUSH	EBX
	CALL	_init_screen
	PUSH	DWORD [-1064+EBP]
	CALL	_sheet_alloc
	PUSH	42240
	PUSH	DWORD [_memman]
	MOV	ESI,EAX
	CALL	_memman_alloc_4k
	PUSH	-1
	MOV	EBX,EAX
	PUSH	165
	PUSH	256
	PUSH	EAX
	PUSH	ESI
	CALL	_sheet_setbuf
	ADD	ESP,44
	PUSH	0
	PUSH	LC0
	PUSH	165
	PUSH	256
	PUSH	EBX
	CALL	_make_window8
	PUSH	0
	PUSH	128
	PUSH	240
	PUSH	28
	PUSH	8
	PUSH	ESI
	CALL	_make_textbox8
	ADD	ESP,44
	CALL	_task_alloc
	PUSH	65536
	PUSH	DWORD [_memman]
	MOV	DWORD [-1080+EBP],EAX
	CALL	_memman_alloc_4k
	ADD	EAX,65524
	MOV	EDX,DWORD [-1080+EBP]
	MOV	DWORD [100+EDX],EAX
	MOV	DWORD [76+EDX],_console_task
	MOV	DWORD [116+EDX],8
	MOV	DWORD [120+EDX],16
	MOV	DWORD [124+EDX],8
	MOV	DWORD [128+EDX],8
	MOV	DWORD [132+EDX],8
	MOV	DWORD [136+EDX],8
	MOV	DWORD [4+EAX],ESI
	MOV	EAX,DWORD [100+EDX]
	MOV	EDX,DWORD [-1060+EBP]
	MOV	DWORD [8+EAX],EDX
	PUSH	2
	PUSH	2
	PUSH	DWORD [-1080+EBP]
	CALL	_task_run
	PUSH	DWORD [-1064+EBP]
	CALL	_sheet_alloc
	PUSH	7488
	PUSH	DWORD [_memman]
	MOV	EDI,EAX
	CALL	_memman_alloc_4k
	ADD	ESP,32
	MOV	EBX,EAX
	PUSH	-1
	PUSH	52
	PUSH	144
	PUSH	EAX
	PUSH	EDI
	CALL	_sheet_setbuf
	PUSH	1
	PUSH	LC1
	PUSH	52
	PUSH	144
	PUSH	EBX
	LEA	EBX,DWORD [-1036+EBP]
	CALL	_make_window8
	ADD	ESP,40
	PUSH	7
	PUSH	16
	PUSH	128
	PUSH	28
	PUSH	8
	PUSH	EDI
	CALL	_make_textbox8
	MOV	DWORD [-1052+EBP],8
	MOV	DWORD [-1056+EBP],7
	CALL	_timer_alloc
	PUSH	1
	MOV	DWORD [-1040+EBP],EAX
	LEA	EAX,DWORD [-44+EBP]
	PUSH	EAX
	PUSH	DWORD [-1040+EBP]
	CALL	_timer_init
	ADD	ESP,36
	PUSH	50
	PUSH	DWORD [-1040+EBP]
	CALL	_timer_settime
	PUSH	DWORD [-1064+EBP]
	CALL	_sheet_alloc
	PUSH	99
	PUSH	16
	PUSH	16
	MOV	DWORD [-1072+EBP],EAX
	PUSH	EBX
	PUSH	EAX
	CALL	_sheet_setbuf
	ADD	ESP,32
	PUSH	99
	PUSH	EBX
	CALL	_init_mouse_cursor8
	PUSH	0
	PUSH	0
	PUSH	DWORD [-1068+EBP]
	CALL	_sheet_slide
	PUSH	100
	PUSH	100
	PUSH	ESI
	CALL	_sheet_slide
	ADD	ESP,32
	PUSH	56
	PUSH	64
	PUSH	EDI
	CALL	_sheet_slide
	PUSH	DWORD [-1048+EBP]
	PUSH	DWORD [-1044+EBP]
	PUSH	DWORD [-1072+EBP]
	CALL	_sheet_slide
	PUSH	0
	PUSH	DWORD [-1068+EBP]
	CALL	_sheet_updown
	ADD	ESP,32
	PUSH	1
	PUSH	ESI
	CALL	_sheet_updown
	PUSH	2
	PUSH	EDI
	CALL	_sheet_updown
	PUSH	3
	PUSH	DWORD [-1072+EBP]
	CALL	_sheet_updown
	LEA	EAX,DWORD [-76+EBP]
	MOV	EDX,DWORD [-1080+EBP]
	MOV	DWORD [-1108+EBP],EDI
	OR	DWORD [28+ESI],32
	MOV	DWORD [36+ESI],EDX
	PUSH	237
	PUSH	EAX
	CALL	_fifo32_put
	LEA	EDX,DWORD [-76+EBP]
	ADD	ESP,32
	PUSH	DWORD [-1088+EBP]
	PUSH	EDX
	CALL	_fifo32_put
L88:
	POP	EBX
	POP	ESI
L85:
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	CALL	_fifo32_status
	POP	ECX
	TEST	EAX,EAX
	JLE	L5
	CMP	DWORD [-1092+EBP],0
	JS	L96
L5:
	LEA	ESI,DWORD [-44+EBP]
	CALL	_io_cli
	PUSH	ESI
	CALL	_fifo32_status
	POP	EDX
	TEST	EAX,EAX
	JE	L97
	PUSH	ESI
	CALL	_fifo32_get
	MOV	EBX,EAX
	CALL	_io_sti
	POP	EAX
	MOV	EAX,DWORD [-1108+EBP]
	CMP	DWORD [28+EAX],0
	JNE	L8
	MOV	EDX,DWORD [-1064+EBP]
	MOV	EAX,DWORD [16+EDX]
	MOV	EAX,DWORD [16+EDX+EAX*4]
	PUSH	DWORD [-1056+EBP]
	PUSH	EDI
	MOV	DWORD [-1108+EBP],EAX
	PUSH	EAX
	CALL	_keywin_on
	ADD	ESP,12
	MOV	DWORD [-1056+EBP],EAX
L8:
	LEA	EAX,DWORD [-256+EBX]
	CMP	EAX,255
	JBE	L98
	LEA	EAX,DWORD [-512+EBX]
	CMP	EAX,255
	JBE	L99
	CMP	EBX,1
	JG	L85
	TEST	EBX,EBX
	JE	L80
	PUSH	0
	PUSH	ESI
	PUSH	DWORD [-1040+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-1056+EBP],0
	JS	L82
	MOV	DWORD [-1056+EBP],0
L82:
	PUSH	50
	PUSH	DWORD [-1040+EBP]
	CALL	_timer_settime
	POP	EAX
	POP	EDX
	CMP	DWORD [-1056+EBP],0
	JS	L85
	MOV	EAX,DWORD [-1052+EBP]
	PUSH	43
	ADD	EAX,7
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1052+EBP]
	MOVZX	EAX,BYTE [-1056+EBP]
	PUSH	EAX
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxfill8
	MOV	EAX,DWORD [-1052+EBP]
	PUSH	44
	ADD	EAX,8
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1052+EBP]
	PUSH	EDI
	CALL	_sheet_refresh
	ADD	ESP,48
	JMP	L85
L80:
	PUSH	1
	PUSH	ESI
	PUSH	DWORD [-1040+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-1056+EBP],0
	JS	L82
	MOV	DWORD [-1056+EBP],7
	JMP	L82
L99:
	MOVZX	EAX,BL
	PUSH	EAX
	LEA	EAX,DWORD [-780+EBP]
	PUSH	EAX
	CALL	_mouse_decode
	POP	EDX
	POP	ECX
	TEST	EAX,EAX
	JE	L85
	MOV	EAX,DWORD [-772+EBP]
	MOV	EDX,DWORD [-776+EBP]
	ADD	DWORD [-1048+EBP],EAX
	ADD	DWORD [-1044+EBP],EDX
	JS	L100
L59:
	CMP	DWORD [-1048+EBP],0
	JS	L101
L60:
	MOV	EDX,DWORD [_binfo]
	MOVSX	EAX,WORD [4+EDX]
	DEC	EAX
	CMP	DWORD [-1044+EBP],EAX
	JLE	L61
	MOV	DWORD [-1044+EBP],EAX
L61:
	MOVSX	EAX,WORD [6+EDX]
	DEC	EAX
	CMP	DWORD [-1048+EBP],EAX
	JLE	L62
	MOV	DWORD [-1048+EBP],EAX
L62:
	PUSH	DWORD [-1048+EBP]
	PUSH	DWORD [-1044+EBP]
	PUSH	DWORD [-1072+EBP]
	CALL	_sheet_slide
	ADD	ESP,12
	TEST	DWORD [-768+EBP],1
	JNE	L102
	MOV	DWORD [-1096+EBP],-1
	JMP	L85
L102:
	CMP	DWORD [-1096+EBP],0
	JS	L103
	MOV	EBX,DWORD [-1048+EBP]
	MOV	EAX,DWORD [-1104+EBP]
	SUB	EBX,DWORD [-1100+EBP]
	MOV	ESI,DWORD [-1044+EBP]
	SUB	ESI,DWORD [-1096+EBP]
	ADD	EBX,DWORD [16+EAX]
	PUSH	EBX
	ADD	ESI,DWORD [12+EAX]
	PUSH	ESI
	PUSH	EAX
	CALL	_sheet_slide
	ADD	ESP,12
	MOV	EDX,DWORD [-1044+EBP]
	MOV	EAX,DWORD [-1048+EBP]
	MOV	DWORD [-1096+EBP],EDX
	MOV	DWORD [-1100+EBP],EAX
	JMP	L85
L103:
	MOV	EAX,DWORD [-1064+EBP]
	MOV	EAX,DWORD [16+EAX]
	MOV	DWORD [-1112+EBP],EAX
	MOV	ECX,EAX
L95:
	DEC	ECX
	TEST	ECX,ECX
	JLE	L85
	MOV	EDX,DWORD [-1064+EBP]
	MOV	EBX,DWORD [-1048+EBP]
	MOV	ESI,DWORD [-1044+EBP]
	MOV	EDX,DWORD [20+EDX+ECX*4]
	MOV	DWORD [-1104+EBP],EDX
	SUB	EBX,DWORD [16+EDX]
	SUB	ESI,DWORD [12+EDX]
	JS	L95
	MOV	EAX,DWORD [4+EDX]
	CMP	ESI,EAX
	JGE	L95
	TEST	EBX,EBX
	JS	L95
	CMP	EBX,DWORD [8+EDX]
	JGE	L95
	IMUL	EAX,EBX
	MOV	DWORD [-1116+EBP],EAX
	MOV	EDX,DWORD [EDX]
	MOV	EAX,DWORD [-1116+EBP]
	ADD	EAX,EBX
	MOVZX	EAX,BYTE [EAX+EDX*1]
	MOV	EDX,DWORD [-1104+EBP]
	CMP	EAX,DWORD [20+EDX]
	JE	L95
	MOV	EAX,DWORD [-1112+EBP]
	DEC	EAX
	PUSH	EAX
	PUSH	EDX
	CALL	_sheet_updown
	POP	ECX
	POP	EAX
	MOV	EAX,DWORD [-1108+EBP]
	CMP	DWORD [-1104+EBP],EAX
	JE	L71
	PUSH	DWORD [-1052+EBP]
	PUSH	DWORD [-1056+EBP]
	PUSH	EDI
	PUSH	EAX
	CALL	_keywin_off
	MOV	EDX,DWORD [-1104+EBP]
	MOV	DWORD [-1108+EBP],EDX
	PUSH	EAX
	PUSH	EDI
	PUSH	EDX
	CALL	_keywin_on
	ADD	ESP,28
	MOV	DWORD [-1056+EBP],EAX
L71:
	CMP	ESI,2
	JLE	L72
	MOV	EDX,DWORD [-1104+EBP]
	MOV	EAX,DWORD [4+EDX]
	SUB	EAX,3
	CMP	ESI,EAX
	JGE	L72
	CMP	EBX,2
	JLE	L72
	CMP	EBX,20
	JG	L72
	MOV	EAX,DWORD [-1044+EBP]
	MOV	EDX,DWORD [-1048+EBP]
	MOV	DWORD [-1096+EBP],EAX
	MOV	DWORD [-1100+EBP],EDX
L72:
	MOV	EAX,DWORD [-1104+EBP]
	MOV	EDX,DWORD [4+EAX]
	LEA	EAX,DWORD [-21+EDX]
	CMP	EAX,ESI
	JG	L85
	LEA	EAX,DWORD [-5+EDX]
	CMP	ESI,EAX
	JGE	L85
	CMP	EBX,4
	JLE	L85
	CMP	EBX,18
	JG	L85
	MOV	EDX,DWORD [-1104+EBP]
	TEST	BYTE [28+EDX],16
	JE	L85
	PUSH	LC4
	PUSH	DWORD [_console]
	CALL	_cons_putstr0
	CALL	_io_cli
	MOV	EDX,DWORD [-1080+EBP]
	MOV	EAX,DWORD [-1080+EBP]
	ADD	EAX,48
	MOV	DWORD [84+EDX],EAX
	MOV	DWORD [76+EDX],_asm_end_app
	CALL	_io_sti
	JMP	L88
L101:
	MOV	DWORD [-1048+EBP],0
	JMP	L60
L100:
	MOV	DWORD [-1044+EBP],0
	JMP	L59
L98:
	CMP	EBX,383
	JG	L10
	CMP	DWORD [-1084+EBP],0
	JE	L11
	MOV	AL,BYTE [_keytable1.1-256+EBX]
L89:
	MOV	BYTE [-124+EBP],AL
L13:
	MOV	DL,BYTE [-124+EBP]
	LEA	EAX,DWORD [-65+EDX]
	CMP	AL,25
	JA	L14
	TEST	DWORD [-1088+EBP],4
	JNE	L87
	CMP	DWORD [-1084+EBP],0
	JE	L16
L14:
	MOV	AL,BYTE [-124+EBP]
	TEST	AL,AL
	JE	L18
	CMP	DWORD [-1108+EBP],EDI
	JE	L104
	MOVSX	EAX,AL
	ADD	EAX,256
	PUSH	EAX
L94:
	MOV	EDX,DWORD [-1108+EBP]
	MOV	EAX,DWORD [36+EDX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
L90:
	POP	EBX
	POP	ESI
L22:
	CMP	DWORD [-1056+EBP],0
	JS	L55
	MOV	EAX,DWORD [-1052+EBP]
	PUSH	43
	ADD	EAX,7
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1052+EBP]
	MOVZX	EAX,BYTE [-1056+EBP]
	PUSH	EAX
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxfill8
	ADD	ESP,28
L55:
	MOV	EAX,DWORD [-1052+EBP]
	PUSH	44
	ADD	EAX,8
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1052+EBP]
	PUSH	EDI
	CALL	_sheet_refresh
	ADD	ESP,20
	JMP	L85
L104:
	CMP	DWORD [-1052+EBP],127
	JG	L22
	PUSH	1
	LEA	EAX,DWORD [-124+EBP]
	PUSH	EAX
	PUSH	7
	PUSH	0
	PUSH	28
	PUSH	DWORD [-1052+EBP]
	PUSH	EDI
	MOV	BYTE [-123+EBP],0
	CALL	_putfonts8_asc_sht
	ADD	DWORD [-1052+EBP],8
L92:
	ADD	ESP,28
	JMP	L22
L18:
	CMP	EBX,270
	JE	L105
	CMP	EBX,271
	JE	L106
	CMP	EBX,298
	JE	L107
	CMP	EBX,310
	JE	L108
	CMP	EBX,426
	JE	L109
	CMP	EBX,438
	JE	L110
	CMP	EBX,314
	JE	L111
	CMP	EBX,325
	JE	L112
	CMP	EBX,326
	JE	L113
	CMP	EBX,506
	JE	L114
	CMP	EBX,510
	JE	L115
	CMP	EBX,284
	JE	L116
	CMP	EBX,315
	JE	L117
L52:
	CMP	EBX,343
	JNE	L22
	MOV	EDX,DWORD [-1064+EBP]
	MOV	EAX,DWORD [16+EDX]
	CMP	EAX,2
	JLE	L22
	DEC	EAX
	PUSH	EAX
	PUSH	DWORD [24+EDX]
	CALL	_sheet_updown
	JMP	L90
L117:
	CMP	DWORD [-1084+EBP],0
	JE	L52
	MOV	EAX,DWORD [-1080+EBP]
	CMP	DWORD [52+EAX],0
	JE	L52
	PUSH	LC3
	PUSH	DWORD [_console]
	CALL	_cons_putstr0
	CALL	_io_cli
	MOV	EDX,DWORD [-1080+EBP]
	MOV	EAX,DWORD [-1080+EBP]
	ADD	EAX,48
	MOV	DWORD [84+EDX],EAX
	MOV	DWORD [76+EDX],_asm_end_app
	CALL	_io_sti
	JMP	L90
L116:
	CMP	DWORD [-1108+EBP],EDI
	JE	L22
	PUSH	266
	JMP	L94
L115:
	CALL	_wait_KBC_sendready
	PUSH	DWORD [-1092+EBP]
	PUSH	96
	CALL	_io_out8
	JMP	L90
L114:
	MOV	DWORD [-1092+EBP],-1
	JMP	L22
L113:
	XOR	DWORD [-1088+EBP],1
L91:
	PUSH	237
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	PUSH	DWORD [-1088+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L22
L112:
	XOR	DWORD [-1088+EBP],2
	JMP	L91
L111:
	XOR	DWORD [-1088+EBP],4
	JMP	L91
L110:
	AND	DWORD [-1084+EBP],-3
	JMP	L22
L109:
	AND	DWORD [-1084+EBP],-2
	JMP	L22
L108:
	OR	DWORD [-1084+EBP],2
	JMP	L22
L107:
	OR	DWORD [-1084+EBP],1
	JMP	L22
L106:
	PUSH	DWORD [-1052+EBP]
	PUSH	DWORD [-1056+EBP]
	PUSH	EDI
	PUSH	DWORD [-1108+EBP]
	CALL	_keywin_off
	ADD	ESP,16
	MOV	DWORD [-1056+EBP],EAX
	MOV	EAX,DWORD [-1108+EBP]
	MOV	ECX,DWORD [24+EAX]
	DEC	ECX
	JNE	L29
	MOV	EDX,DWORD [-1064+EBP]
	MOV	ECX,DWORD [16+EDX]
	DEC	ECX
L29:
	MOV	EAX,DWORD [-1064+EBP]
	MOV	ECX,DWORD [20+EAX+ECX*4]
	PUSH	DWORD [-1056+EBP]
	PUSH	EDI
	MOV	DWORD [-1108+EBP],ECX
	PUSH	ECX
	CALL	_keywin_on
	ADD	ESP,12
	MOV	DWORD [-1056+EBP],EAX
	JMP	L22
L105:
	CMP	DWORD [-1108+EBP],EDI
	JE	L118
	PUSH	264
	JMP	L94
L118:
	CMP	DWORD [-1052+EBP],8
	JLE	L22
	PUSH	1
	PUSH	LC2
	PUSH	7
	PUSH	0
	PUSH	28
	PUSH	DWORD [-1052+EBP]
	PUSH	EDI
	CALL	_putfonts8_asc_sht
	SUB	DWORD [-1052+EBP],8
	JMP	L92
L16:
	LEA	EAX,DWORD [32+EDX]
	MOV	BYTE [-124+EBP],AL
	JMP	L14
L87:
	CMP	DWORD [-1084+EBP],0
	JE	L14
	JMP	L16
L11:
	MOV	AL,BYTE [_keytable0.0-256+EBX]
	JMP	L89
L10:
	MOV	BYTE [-124+EBP],0
	JMP	L13
L97:
	PUSH	DWORD [-1076+EBP]
	CALL	_task_sleep
	CALL	_io_sti
	POP	EAX
	JMP	L85
L96:
	PUSH	EBX
	CALL	_fifo32_get
	MOV	DWORD [-1092+EBP],EAX
	CALL	_wait_KBC_sendready
	PUSH	DWORD [-1092+EBP]
	PUSH	96
	CALL	_io_out8
	ADD	ESP,12
	JMP	L5
	GLOBAL	_keywin_off
_keywin_off:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EDI,DWORD [16+EBP]
	MOV	EBX,DWORD [8+EBP]
	PUSH	0
	PUSH	EBX
	MOV	ESI,DWORD [20+EBP]
	CALL	_change_wtitle8
	CMP	EBX,DWORD [12+EBP]
	POP	ECX
	POP	EAX
	JE	L123
	TEST	BYTE [28+EBX],32
	JNE	L124
L121:
	LEA	ESP,DWORD [-12+EBP]
	MOV	EAX,EDI
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L124:
	PUSH	3
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
	JMP	L121
L123:
	PUSH	43
	LEA	EAX,DWORD [7+ESI]
	PUSH	EAX
	OR	EDI,-1
	PUSH	28
	PUSH	ESI
	PUSH	7
	PUSH	DWORD [4+EBX]
	PUSH	DWORD [EBX]
	CALL	_boxfill8
	ADD	ESP,28
	JMP	L121
	GLOBAL	_keywin_on
_keywin_on:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	PUSH	1
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	MOV	ESI,DWORD [16+EBP]
	CALL	_change_wtitle8
	CMP	EBX,DWORD [12+EBP]
	POP	ECX
	POP	EAX
	JE	L129
	TEST	BYTE [28+EBX],32
	JNE	L130
L127:
	LEA	ESP,DWORD [-8+EBP]
	MOV	EAX,ESI
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L130:
	PUSH	2
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
	JMP	L127
L129:
	XOR	ESI,ESI
	JMP	L127
