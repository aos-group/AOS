[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_init_gdtidt
	EXTERN	_init_pic
	EXTERN	_io_sti
	EXTERN	_fifo32_init
	EXTERN	_init_pit
	EXTERN	_init_keyboard
	EXTERN	_enable_mouse
	EXTERN	_io_out8
	EXTERN	_memtest
	EXTERN	_memman
	EXTERN	_memman_init
	EXTERN	_memman_free
	EXTERN	_init_palette
	EXTERN	_shtctl_init
	EXTERN	_task_init
	EXTERN	_task_run
	EXTERN	_sheet_alloc
	EXTERN	_memman_alloc_4k
	EXTERN	_sheet_setbuf
	EXTERN	_init_screen
	EXTERN	_make_window8
	EXTERN	_make_textbox8
	EXTERN	_task_alloc
	EXTERN	_console_task
	EXTERN	_timer_alloc
	EXTERN	_timer_init
	EXTERN	_timer_settime
	EXTERN	_init_mouse_cursor8
	EXTERN	_sheet_slide
	EXTERN	_sheet_updown
	EXTERN	_fifo32_put
	EXTERN	_fifo32_status
	EXTERN	_io_cli
	EXTERN	_fifo32_get
	EXTERN	_boxfill8
	EXTERN	_sheet_refresh
	EXTERN	_mouse_decode
	EXTERN	_putfonts8_asc_sht
	EXTERN	_console
	EXTERN	_cons_putstr0
	EXTERN	_asm_end_app
	EXTERN	_wait_KBC_sendready
	EXTERN	_make_wtitle8
	EXTERN	_task_sleep
[FILE "bootpack.c"]
	GLOBAL	_binfo
[SECTION .data]
	ALIGNB	4
_binfo:
	DD	4080
_keytable0.0:
	DB	0
	DB	0
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	48
	DB	45
	DB	94
	DB	0
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	64
	DB	91
	DB	0
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	59
	DB	58
	DB	0
	DB	0
	DB	93
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	44
	DB	46
	DB	47
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
_keytable1.1:
	DB	0
	DB	0
	DB	33
	DB	34
	DB	35
	DB	36
	DB	37
	DB	38
	DB	39
	DB	40
	DB	41
	DB	126
	DB	61
	DB	126
	DB	0
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	96
	DB	123
	DB	0
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	43
	DB	42
	DB	0
	DB	0
	DB	125
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	60
	DB	62
	DB	63
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	95
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	124
	DB	0
	DB	0
LC0:
	DB	"console",0x00
LC1:
	DB	"task_a",0x00
LC3:
	DB	0x0A,"Break(key):",0x0A,0x00
LC2:
	DB	" ",0x00
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,1092
	MOV	EDX,DWORD [_binfo]
	MOV	DWORD [-1092+EBP],0
	MOVSX	EAX,WORD [4+EDX]
	SUB	EAX,16
	SAR	EAX,1
	MOV	DWORD [-1044+EBP],EAX
	MOVSX	EAX,WORD [6+EDX]
	SUB	EAX,44
	SAR	EAX,1
	MOV	DWORD [-1048+EBP],EAX
	MOV	DWORD [-1096+EBP],0
	MOV	AL,BYTE [1+EDX]
	SAR	AL,4
	MOV	EDX,EAX
	AND	EDX,7
	MOV	DWORD [-1100+EBP],EDX
	MOV	DWORD [-1104+EBP],-1
	CALL	_init_gdtidt
	CALL	_init_pic
	CALL	_io_sti
	LEA	EAX,DWORD [-636+EBP]
	PUSH	0
	PUSH	EAX
	LEA	EAX,DWORD [-44+EBP]
	PUSH	128
	PUSH	EAX
	CALL	_fifo32_init
	LEA	EDX,DWORD [-76+EBP]
	PUSH	0
	LEA	EAX,DWORD [-764+EBP]
	PUSH	EAX
	PUSH	32
	PUSH	EDX
	CALL	_fifo32_init
	ADD	ESP,32
	CALL	_init_pit
	LEA	EAX,DWORD [-44+EBP]
	PUSH	256
	PUSH	EAX
	CALL	_init_keyboard
	LEA	EDX,DWORD [-44+EBP]
	LEA	EAX,DWORD [-780+EBP]
	PUSH	EAX
	PUSH	512
	PUSH	EDX
	CALL	_enable_mouse
	PUSH	248
	PUSH	33
	CALL	_io_out8
	PUSH	239
	PUSH	161
	CALL	_io_out8
	ADD	ESP,36
	PUSH	-1073741825
	PUSH	4194304
	CALL	_memtest
	PUSH	DWORD [_memman]
	MOV	DWORD [-1060+EBP],EAX
	CALL	_memman_init
	PUSH	647168
	PUSH	4096
	PUSH	DWORD [_memman]
	CALL	_memman_free
	MOV	EAX,DWORD [-1060+EBP]
	SUB	EAX,4194304
	PUSH	EAX
	PUSH	4194304
	PUSH	DWORD [_memman]
	CALL	_memman_free
	ADD	ESP,36
	CALL	_init_palette
	MOV	EDX,DWORD [_binfo]
	MOVSX	EAX,WORD [6+EDX]
	PUSH	EAX
	MOVSX	EAX,WORD [4+EDX]
	PUSH	EAX
	PUSH	DWORD [8+EDX]
	PUSH	DWORD [_memman]
	CALL	_shtctl_init
	MOV	DWORD [4068],EAX
	MOV	ESI,EAX
	PUSH	DWORD [_memman]
	CALL	_task_init
	PUSH	2
	PUSH	1
	PUSH	EAX
	MOV	DWORD [-1084+EBP],EAX
	MOV	DWORD [-20+EBP],EAX
	CALL	_task_run
	ADD	ESP,32
	PUSH	ESI
	CALL	_sheet_alloc
	MOV	EDX,DWORD [_binfo]
	MOV	DWORD [-1064+EBP],EAX
	MOVSX	EAX,WORD [4+EDX]
	MOVSX	EDX,WORD [6+EDX]
	IMUL	EAX,EDX
	PUSH	EAX
	PUSH	DWORD [_memman]
	CALL	_memman_alloc_4k
	MOV	EDX,DWORD [_binfo]
	PUSH	-1
	MOV	EBX,EAX
	MOVSX	EAX,WORD [6+EDX]
	PUSH	EAX
	MOVSX	EAX,WORD [4+EDX]
	PUSH	EAX
	PUSH	EBX
	PUSH	DWORD [-1064+EBP]
	CALL	_sheet_setbuf
	MOV	EDX,DWORD [_binfo]
	ADD	ESP,32
	MOVSX	EAX,WORD [6+EDX]
	PUSH	EAX
	MOVSX	EAX,WORD [4+EDX]
	PUSH	EAX
	PUSH	EBX
	LEA	EBX,DWORD [-1036+EBP]
	CALL	_init_screen
	PUSH	ESI
	CALL	_sheet_alloc
	PUSH	42240
	PUSH	DWORD [_memman]
	MOV	DWORD [-1072+EBP],EAX
	CALL	_memman_alloc_4k
	PUSH	-1
	PUSH	165
	MOV	DWORD [-1080+EBP],EAX
	PUSH	256
	PUSH	EAX
	PUSH	DWORD [-1072+EBP]
	CALL	_sheet_setbuf
	ADD	ESP,44
	PUSH	0
	PUSH	LC0
	PUSH	165
	PUSH	256
	PUSH	DWORD [-1080+EBP]
	CALL	_make_window8
	PUSH	0
	PUSH	128
	PUSH	240
	PUSH	28
	PUSH	8
	PUSH	DWORD [-1072+EBP]
	CALL	_make_textbox8
	ADD	ESP,44
	CALL	_task_alloc
	PUSH	65536
	PUSH	DWORD [_memman]
	MOV	DWORD [-1088+EBP],EAX
	CALL	_memman_alloc_4k
	MOV	EDX,DWORD [-1088+EBP]
	ADD	EAX,65524
	MOV	DWORD [100+EDX],EAX
	MOV	DWORD [76+EDX],_console_task
	MOV	DWORD [116+EDX],8
	MOV	DWORD [120+EDX],16
	MOV	DWORD [124+EDX],8
	MOV	DWORD [128+EDX],8
	MOV	DWORD [132+EDX],8
	MOV	DWORD [136+EDX],8
	MOV	EDX,DWORD [-1072+EBP]
	MOV	DWORD [4+EAX],EDX
	MOV	EDX,DWORD [-1088+EBP]
	MOV	EAX,DWORD [100+EDX]
	MOV	EDX,DWORD [-1060+EBP]
	MOV	DWORD [8+EAX],EDX
	PUSH	2
	PUSH	2
	PUSH	DWORD [-1088+EBP]
	CALL	_task_run
	PUSH	ESI
	CALL	_sheet_alloc
	PUSH	7488
	PUSH	DWORD [_memman]
	MOV	EDI,EAX
	CALL	_memman_alloc_4k
	ADD	ESP,32
	MOV	DWORD [-1076+EBP],EAX
	PUSH	-1
	PUSH	52
	PUSH	144
	PUSH	EAX
	PUSH	EDI
	CALL	_sheet_setbuf
	PUSH	1
	PUSH	LC1
	PUSH	52
	PUSH	144
	PUSH	DWORD [-1076+EBP]
	CALL	_make_window8
	ADD	ESP,40
	PUSH	7
	PUSH	16
	PUSH	128
	PUSH	28
	PUSH	8
	PUSH	EDI
	CALL	_make_textbox8
	MOV	DWORD [-1052+EBP],8
	MOV	DWORD [-1056+EBP],7
	CALL	_timer_alloc
	PUSH	1
	MOV	DWORD [-1040+EBP],EAX
	LEA	EAX,DWORD [-44+EBP]
	PUSH	EAX
	PUSH	DWORD [-1040+EBP]
	CALL	_timer_init
	ADD	ESP,36
	PUSH	50
	PUSH	DWORD [-1040+EBP]
	CALL	_timer_settime
	PUSH	ESI
	CALL	_sheet_alloc
	PUSH	99
	PUSH	16
	PUSH	16
	MOV	DWORD [-1068+EBP],EAX
	PUSH	EBX
	PUSH	EAX
	CALL	_sheet_setbuf
	ADD	ESP,32
	PUSH	99
	PUSH	EBX
	CALL	_init_mouse_cursor8
	PUSH	0
	PUSH	0
	PUSH	DWORD [-1064+EBP]
	CALL	_sheet_slide
	PUSH	100
	PUSH	100
	PUSH	DWORD [-1072+EBP]
	CALL	_sheet_slide
	ADD	ESP,32
	PUSH	56
	PUSH	64
	PUSH	EDI
	CALL	_sheet_slide
	PUSH	DWORD [-1048+EBP]
	PUSH	DWORD [-1044+EBP]
	PUSH	DWORD [-1068+EBP]
	CALL	_sheet_slide
	PUSH	0
	PUSH	DWORD [-1064+EBP]
	CALL	_sheet_updown
	ADD	ESP,32
	PUSH	1
	PUSH	DWORD [-1072+EBP]
	CALL	_sheet_updown
	PUSH	2
	PUSH	EDI
	CALL	_sheet_updown
	PUSH	3
	PUSH	DWORD [-1068+EBP]
	CALL	_sheet_updown
	LEA	EDX,DWORD [-76+EBP]
	PUSH	237
	PUSH	EDX
	CALL	_fifo32_put
	LEA	EAX,DWORD [-76+EBP]
	ADD	ESP,32
	PUSH	DWORD [-1100+EBP]
	PUSH	EAX
	CALL	_fifo32_put
	POP	EBX
	POP	ESI
L69:
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	CALL	_fifo32_status
	POP	ECX
	TEST	EAX,EAX
	JLE	L5
	CMP	DWORD [-1104+EBP],0
	JS	L77
L5:
	LEA	ESI,DWORD [-44+EBP]
	CALL	_io_cli
	PUSH	ESI
	CALL	_fifo32_status
	POP	EDX
	TEST	EAX,EAX
	JE	L78
	PUSH	ESI
	CALL	_fifo32_get
	MOV	EBX,EAX
	CALL	_io_sti
	POP	ECX
	LEA	EAX,DWORD [-256+EBX]
	CMP	EAX,255
	JBE	L79
	LEA	EAX,DWORD [-512+EBX]
	CMP	EAX,255
	JBE	L80
	CMP	EBX,1
	JG	L69
	TEST	EBX,EBX
	JE	L64
	PUSH	0
	PUSH	ESI
	PUSH	DWORD [-1040+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-1056+EBP],0
	JS	L66
	MOV	DWORD [-1056+EBP],0
L66:
	PUSH	50
	PUSH	DWORD [-1040+EBP]
	CALL	_timer_settime
	POP	EAX
	POP	EDX
	CMP	DWORD [-1056+EBP],0
	JS	L69
	MOV	EAX,DWORD [-1052+EBP]
	PUSH	43
	ADD	EAX,7
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1052+EBP]
	MOVZX	EAX,BYTE [-1056+EBP]
	PUSH	EAX
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxfill8
	MOV	EAX,DWORD [-1052+EBP]
	PUSH	44
	ADD	EAX,8
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1052+EBP]
	PUSH	EDI
	CALL	_sheet_refresh
	ADD	ESP,48
	JMP	L69
L64:
	PUSH	1
	PUSH	ESI
	PUSH	DWORD [-1040+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-1056+EBP],0
	JS	L66
	MOV	DWORD [-1056+EBP],7
	JMP	L66
L80:
	MOVZX	EAX,BL
	PUSH	EAX
	LEA	EAX,DWORD [-780+EBP]
	PUSH	EAX
	CALL	_mouse_decode
	POP	ECX
	POP	EBX
	TEST	EAX,EAX
	JE	L69
	MOV	EAX,DWORD [-772+EBP]
	MOV	EDX,DWORD [-776+EBP]
	ADD	DWORD [-1048+EBP],EAX
	ADD	DWORD [-1044+EBP],EDX
	JS	L81
L57:
	CMP	DWORD [-1048+EBP],0
	JS	L82
L58:
	MOV	EDX,DWORD [_binfo]
	MOVSX	EAX,WORD [4+EDX]
	DEC	EAX
	CMP	DWORD [-1044+EBP],EAX
	JLE	L59
	MOV	DWORD [-1044+EBP],EAX
L59:
	MOVSX	EAX,WORD [6+EDX]
	DEC	EAX
	CMP	DWORD [-1048+EBP],EAX
	JLE	L60
	MOV	DWORD [-1048+EBP],EAX
L60:
	PUSH	DWORD [-1048+EBP]
	PUSH	DWORD [-1044+EBP]
	PUSH	DWORD [-1068+EBP]
	CALL	_sheet_slide
	ADD	ESP,12
	TEST	DWORD [-768+EBP],1
	JE	L69
	MOV	EAX,DWORD [-1048+EBP]
	SUB	EAX,8
	PUSH	EAX
	MOV	EAX,DWORD [-1044+EBP]
	SUB	EAX,80
	PUSH	EAX
	PUSH	EDI
	CALL	_sheet_slide
	ADD	ESP,12
	JMP	L69
L82:
	MOV	DWORD [-1048+EBP],0
	JMP	L58
L81:
	MOV	DWORD [-1044+EBP],0
	JMP	L57
L79:
	CMP	EBX,383
	JG	L9
	CMP	DWORD [-1096+EBP],0
	JE	L10
	MOV	AL,BYTE [_keytable1.1-256+EBX]
L71:
	MOV	BYTE [-124+EBP],AL
L12:
	MOV	DL,BYTE [-124+EBP]
	LEA	EAX,DWORD [-65+EDX]
	CMP	AL,25
	JA	L13
	TEST	DWORD [-1100+EBP],4
	JNE	L70
	CMP	DWORD [-1096+EBP],0
	JE	L15
L13:
	MOV	AL,BYTE [-124+EBP]
	TEST	AL,AL
	JE	L17
	CMP	DWORD [-1092+EBP],0
	JNE	L18
	CMP	DWORD [-1052+EBP],127
	JG	L21
	PUSH	1
	LEA	EAX,DWORD [-124+EBP]
	PUSH	EAX
	PUSH	7
	PUSH	0
	PUSH	28
	PUSH	DWORD [-1052+EBP]
	PUSH	EDI
	MOV	BYTE [-123+EBP],0
	CALL	_putfonts8_asc_sht
	ADD	DWORD [-1052+EBP],8
L74:
	ADD	ESP,28
L21:
	CMP	DWORD [-1056+EBP],0
	JS	L53
	MOV	EAX,DWORD [-1052+EBP]
	PUSH	43
	ADD	EAX,7
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1052+EBP]
	MOVZX	EAX,BYTE [-1056+EBP]
	PUSH	EAX
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxfill8
	ADD	ESP,28
L53:
	MOV	EAX,DWORD [-1052+EBP]
	PUSH	44
	ADD	EAX,8
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1052+EBP]
	PUSH	EDI
	CALL	_sheet_refresh
	ADD	ESP,20
	JMP	L69
L18:
	MOVSX	EAX,AL
	ADD	EAX,256
	PUSH	EAX
L76:
	MOV	EAX,DWORD [-1088+EBP]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
L72:
	POP	ESI
	POP	EAX
	JMP	L21
L17:
	CMP	EBX,270
	JE	L83
	CMP	EBX,271
	JE	L84
	CMP	EBX,298
	JE	L85
	CMP	EBX,310
	JE	L86
	CMP	EBX,426
	JE	L87
	CMP	EBX,438
	JE	L88
	CMP	EBX,314
	JE	L89
	CMP	EBX,325
	JE	L90
	CMP	EBX,326
	JE	L91
	CMP	EBX,506
	JE	L92
	CMP	EBX,510
	JE	L93
	CMP	EBX,284
	JE	L94
	CMP	EBX,315
	JNE	L21
	CMP	DWORD [-1096+EBP],0
	JE	L21
	MOV	EAX,DWORD [-1088+EBP]
	CMP	DWORD [52+EAX],0
	JE	L21
	PUSH	LC3
	PUSH	DWORD [_console]
	CALL	_cons_putstr0
	CALL	_io_cli
	MOV	EDX,DWORD [-1088+EBP]
	MOV	EAX,DWORD [-1088+EBP]
	ADD	EAX,48
	MOV	DWORD [84+EDX],EAX
	MOV	DWORD [76+EDX],_asm_end_app
	CALL	_io_sti
	JMP	L72
L94:
	CMP	DWORD [-1092+EBP],0
	JE	L21
	PUSH	266
	JMP	L76
L93:
	CALL	_wait_KBC_sendready
	PUSH	DWORD [-1104+EBP]
	PUSH	96
	CALL	_io_out8
	JMP	L72
L92:
	MOV	DWORD [-1104+EBP],-1
	JMP	L21
L91:
	XOR	DWORD [-1100+EBP],1
L73:
	PUSH	237
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	PUSH	DWORD [-1100+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L21
L90:
	XOR	DWORD [-1100+EBP],2
	JMP	L73
L89:
	XOR	DWORD [-1100+EBP],4
	JMP	L73
L88:
	AND	DWORD [-1096+EBP],-3
	JMP	L21
L87:
	AND	DWORD [-1096+EBP],-2
	JMP	L21
L86:
	OR	DWORD [-1096+EBP],2
	JMP	L21
L85:
	OR	DWORD [-1096+EBP],1
	JMP	L21
L84:
	CMP	DWORD [-1092+EBP],0
	JNE	L28
	PUSH	0
	PUSH	LC1
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [-1076+EBP]
	MOV	DWORD [-1092+EBP],1
	CALL	_make_wtitle8
	MOV	EDX,DWORD [-1072+EBP]
	PUSH	1
	PUSH	LC0
	PUSH	DWORD [4+EDX]
	PUSH	DWORD [-1080+EBP]
	CALL	_make_wtitle8
	MOV	EAX,DWORD [-1052+EBP]
	ADD	ESP,32
	ADD	EAX,7
	MOV	DWORD [-1056+EBP],-1
	PUSH	43
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1052+EBP]
	PUSH	7
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxfill8
	MOV	EAX,DWORD [-1088+EBP]
	PUSH	2
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	ADD	ESP,36
L29:
	PUSH	21
	PUSH	DWORD [4+EDI]
	PUSH	0
	PUSH	0
	PUSH	EDI
	CALL	_sheet_refresh
	MOV	EDX,DWORD [-1072+EBP]
	PUSH	21
	PUSH	DWORD [4+EDX]
	PUSH	0
	PUSH	0
	PUSH	EDX
	CALL	_sheet_refresh
	ADD	ESP,40
	JMP	L21
L28:
	PUSH	1
	PUSH	LC1
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [-1076+EBP]
	MOV	DWORD [-1092+EBP],0
	CALL	_make_wtitle8
	MOV	EAX,DWORD [-1072+EBP]
	PUSH	0
	PUSH	LC0
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [-1080+EBP]
	CALL	_make_wtitle8
	MOV	EAX,DWORD [-1088+EBP]
	ADD	ESP,32
	ADD	EAX,16
	MOV	DWORD [-1056+EBP],0
	PUSH	3
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
	JMP	L29
L83:
	CMP	DWORD [-1092+EBP],0
	JNE	L23
	CMP	DWORD [-1052+EBP],8
	JLE	L21
	PUSH	1
	PUSH	LC2
	PUSH	7
	PUSH	0
	PUSH	28
	PUSH	DWORD [-1052+EBP]
	PUSH	EDI
	CALL	_putfonts8_asc_sht
	SUB	DWORD [-1052+EBP],8
	JMP	L74
L23:
	PUSH	264
	JMP	L76
L15:
	LEA	EAX,DWORD [32+EDX]
	MOV	BYTE [-124+EBP],AL
	JMP	L13
L70:
	CMP	DWORD [-1096+EBP],0
	JE	L13
	JMP	L15
L10:
	MOV	AL,BYTE [_keytable0.0-256+EBX]
	JMP	L71
L9:
	MOV	BYTE [-124+EBP],0
	JMP	L12
L78:
	PUSH	DWORD [-1084+EBP]
	CALL	_task_sleep
	CALL	_io_sti
	POP	EBX
	JMP	L69
L77:
	PUSH	EBX
	CALL	_fifo32_get
	MOV	DWORD [-1104+EBP],EAX
	CALL	_wait_KBC_sendready
	PUSH	DWORD [-1104+EBP]
	PUSH	96
	CALL	_io_out8
	ADD	ESP,12
	JMP	L5
